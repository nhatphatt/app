"""
Google Gemini AI Service

Integrates Google's Gemini AI for intelligent chatbot responses.
"""

import os
import json
from typing import Dict, List, Optional
import google.generativeai as genai


class GeminiService:
    """
    Service for interacting with Google Gemini AI
    """

    def __init__(self):
        # Configure Gemini API
        api_key = os.environ.get('GEMINI_API_KEY')
        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable not set")

        genai.configure(api_key=api_key)

        # Use Gemini Flash Latest for fast responses with higher quota
        # Free tier: 15 RPM (requests per minute) vs 2 RPM for Pro
        self.model = genai.GenerativeModel('gemini-flash-latest')

        # System instructions for the chatbot
        self.system_context = """B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng ƒë·∫∑t m√≥n ƒÉn Minitake.

NHI·ªÜM V·ª§:
- Gi√∫p kh√°ch h√†ng ch·ªçn m√≥n ƒÉn, ƒë·ªì u·ªëng ph√π h·ª£p
- Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ th·ª±c ƒë∆°n, gi√° c·∫£, khuy·∫øn m√£i
- H·ªó tr·ª£ ƒë·∫∑t m√≥n, xem gi·ªè h√†ng
- G·ª£i √Ω m√≥n ƒÉn d·ª±a tr√™n s·ªü th√≠ch, th·ªùi gian, ng·ªØ c·∫£nh

PHONG C√ÅCH:
- Th√¢n thi·ªán, nhi·ªát t√¨nh nh∆∞ nh√¢n vi√™n ph·ª•c v·ª• chuy√™n nghi·ªáp
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, d·ªÖ hi·ªÉu
- Ng·∫Øn g·ªçn, s√∫c t√≠ch (2-3 c√¢u)
- Emoji ph√π h·ª£p (üòä üç¥ üëç)

QUY T·∫ÆC:
- KH√îNG b·ªãa ƒë·∫∑t m√≥n ƒÉn kh√¥ng c√≥ trong menu
- LU√îN ƒë·ªÅ xu·∫•t d·ª±a tr√™n menu th·ª±c t·∫ø
- N·∫æU kh√¥ng ch·∫Øc ch·∫Øn, h·ªèi l·∫°i kh√°ch h√†ng
- ∆Øu ti√™n m√≥n c√≥ khuy·∫øn m√£i khi g·ª£i √Ω

THANH TO√ÅN:
- KH√îNG x·ª≠ l√Ω thanh to√°n trong chatbot
- KHI kh√°ch h·ªèi v·ªÅ thanh to√°n, h∆∞·ªõng d·∫´n: "ƒê·ªÉ thanh to√°n, b·∫°n vui l√≤ng m·ªü gi·ªè h√†ng v√† nh·∫•n n√∫t Thanh to√°n nh√©! üí≥"
- KHI kh√°ch mu·ªën ƒë·∫∑t m√≥n xong, nh·∫Øc: "B·∫°n c√≥ th·ªÉ xem gi·ªè h√†ng v√† thanh to√°n b·∫•t c·ª© l√∫c n√†o! üõí"
"""

    def detect_intent(self, message: str, conversation_history: List[Dict] = None) -> Dict:
        """
        Use Gemini to detect user intent and extract entities

        Returns:
            {
                "intent": str,  # greeting, ask_recommendation, order_item, etc.
                "confidence": float,  # 0.0 to 1.0
                "entities": dict,  # extracted entities (item_name, quantity, etc.)
                "response_type": str  # Type of response expected
            }
        """

        # Build prompt for intent detection
        prompt = f"""{self.system_context}

PH√ÇN T√çCH TIN NH·∫ÆN:
Tin nh·∫Øn c·ªßa kh√°ch: "{message}"

H√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ JSON v·ªõi format sau:
{{
  "intent": "<one of: greeting, ask_recommendation, ask_item_info, order_item, view_cart, modify_cart, ask_promotion, ask_menu, payment, help, thank, goodbye, fallback>",
  "confidence": <0.0 to 1.0>,
  "entities": {{
    "item_name": "<t√™n m√≥n n·∫øu c√≥>",
    "quantity": <s·ªë l∆∞·ª£ng n·∫øu c√≥>,
    "category": "<lo·∫°i m√≥n: ƒë·ªì ƒÉn/ƒë·ªì u·ªëng/tr√°ng mi·ªáng n·∫øu c√≥>"
  }},
  "response_type": "<greeting/recommendation/item_info/order_confirmation/cart_display/etc>"
}}

CH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.
"""

        try:
            response = self.model.generate_content(prompt)
            result_text = response.text.strip()

            # Remove markdown code blocks if present
            if result_text.startswith('```json'):
                result_text = result_text[7:]
            if result_text.startswith('```'):
                result_text = result_text[3:]
            if result_text.endswith('```'):
                result_text = result_text[:-3]

            result_text = result_text.strip()

            # Parse JSON response
            intent_data = json.loads(result_text)

            return intent_data

        except Exception as e:
            print(f"Error in Gemini intent detection: {e}")
            # Fallback to default
            return {
                "intent": "fallback",
                "confidence": 0.5,
                "entities": {},
                "response_type": "fallback"
            }

    def generate_response(
        self,
        intent: str,
        message: str,
        context: Dict,
        menu_items: List[Dict] = None,
        conversation_history: List[Dict] = None
    ) -> str:
        """
        Generate natural language response using Gemini

        Args:
            intent: Detected intent
            message: Original user message
            context: Conversation context (cart, customer info, etc.)
            menu_items: Available menu items (for recommendations)
            conversation_history: Previous messages

        Returns:
            Natural language response
        """

        # Build context information
        context_info = []

        if context.get('cart_items'):
            cart_summary = []
            for item in context['cart_items']:
                cart_summary.append(f"- {item.get('name')} x{item.get('quantity', 1)}")
            context_info.append(f"Gi·ªè h√†ng hi·ªán t·∫°i:\n" + "\n".join(cart_summary))
        else:
            context_info.append("Gi·ªè h√†ng: tr·ªëng")

        if context.get('time_of_day'):
            context_info.append(f"Th·ªùi gian: {context['time_of_day']}")

        # Menu items context
        menu_context = ""
        if menu_items and len(menu_items) > 0:
            menu_context = "\n\nM·ªòT S·ªê M√ìN TRONG MENU:\n"
            for item in menu_items[:10]:  # Limit to 10 items to save tokens
                price = item.get('discounted_price') if item.get('has_promotion') else item.get('price', 0)
                promo_tag = " [KHUY·∫æN M√ÉI]" if item.get('has_promotion') else ""
                menu_context += f"- {item.get('name')}: {price:,.0f}ƒë{promo_tag}\n"

        # Build conversation history
        history_text = ""
        if conversation_history and len(conversation_history) > 0:
            history_text = "\n\nH·ªòI THO·∫†I TR∆Ø·ªöC:\n"
            for msg in conversation_history[-5:]:  # Last 5 messages
                role = "Kh√°ch" if msg.get('role') == 'user' else "Bot"
                history_text += f"{role}: {msg.get('content')}\n"

        # Build full prompt
        prompt = f"""{self.system_context}

NG·ªÆ C·∫¢NH:
{chr(10).join(context_info)}
{menu_context}
{history_text}

TIN NH·∫ÆN M·ªöI:
Intent: {intent}
Kh√°ch h√†ng: "{message}"

H√£y tr·∫£ l·ªùi kh√°ch h√†ng m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán.
- N·∫æU intent l√† "ask_recommendation": G·ª£i √Ω 2-3 m√≥n ph√π h·ª£p t·ª´ menu
- N·∫æU intent l√† "order_item": X√°c nh·∫≠n ƒë√£ th√™m m√≥n v√†o gi·ªè h√†ng
- N·∫æU intent l√† "view_cart": Li·ªát k√™ m√≥n trong gi·ªè h√†ng
- N·∫æU intent l√† "ask_promotion": Gi·ªõi thi·ªáu m√≥n ƒëang khuy·∫øn m√£i

CH·ªà tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi, KH√îNG th√™m gi·∫£i th√≠ch hay metadata.
ƒê·ªô d√†i: 2-4 c√¢u.
"""

        try:
            response = self.model.generate_content(prompt)
            return response.text.strip()

        except Exception as e:
            print(f"Error in Gemini response generation: {e}")
            return "Xin l·ªói, m√¨nh ƒëang g·∫∑p ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. B·∫°n th·ª≠ l·∫°i sau ch√∫t nh√©! üòÖ"

    def generate_recommendation(
        self,
        context: Dict,
        menu_items: List[Dict],
        limit: int = 3
    ) -> List[Dict]:
        """
        Use Gemini to intelligently select recommendations

        Args:
            context: User context (time, cart, preferences)
            menu_items: All available menu items
            limit: Number of recommendations to return

        Returns:
            List of recommended items with reasons
        """

        if not menu_items or len(menu_items) == 0:
            return []

        # Build menu list for Gemini
        menu_text = ""
        for idx, item in enumerate(menu_items):
            price = item.get('discounted_price') if item.get('has_promotion') else item.get('price', 0)
            promo = " [KHUY·∫æN M√ÉI]" if item.get('has_promotion') else ""
            category = item.get('category', {}).get('name', '')
            menu_text += f"{idx}. {item.get('name')} - {category} - {price:,.0f}ƒë{promo}\n"

        # Build context
        time_of_day = context.get('time_of_day', 'day')
        cart_items = context.get('cart_items', [])
        cart_text = ", ".join([item.get('name') for item in cart_items]) if cart_items else "tr·ªëng"

        prompt = f"""{self.system_context}

MENU HI·ªÜN T·∫†I:
{menu_text}

NG·ªÆ C·∫¢NH:
- Th·ªùi gian: {time_of_day}
- Gi·ªè h√†ng: {cart_text}

H√£y ch·ªçn {limit} m√≥n ph√π h·ª£p nh·∫•t ƒë·ªÉ g·ª£i √Ω cho kh√°ch h√†ng.

Tr·∫£ v·ªÅ JSON format:
{{
  "recommendations": [
    {{
      "index": <index c·ªßa m√≥n trong menu>,
      "reason": "<l√Ω do g·ª£i √Ω ng·∫Øn g·ªçn>"
    }}
  ]
}}

QUY T·∫ÆC:
- ∆Øu ti√™n m√≥n c√≥ khuy·∫øn m√£i
- Ph√π h·ª£p v·ªõi th·ªùi gian (s√°ng‚Üíbreakfast, tr∆∞a‚Üílunch, t·ªëi‚Üídinner)
- ƒêa d·∫°ng lo·∫°i m√≥n (ƒë·ªì ƒÉn + ƒë·ªì u·ªëng)
- KH√îNG ch·ªçn m√≥n ƒë√£ c√≥ trong gi·ªè h√†ng

CH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch.
"""

        try:
            response = self.model.generate_content(prompt)
            result_text = response.text.strip()

            # Clean markdown
            if result_text.startswith('```json'):
                result_text = result_text[7:]
            if result_text.startswith('```'):
                result_text = result_text[3:]
            if result_text.endswith('```'):
                result_text = result_text[:-3]
            result_text = result_text.strip()

            # Parse response
            result = json.loads(result_text)
            recommendations = []

            for rec in result.get('recommendations', []):
                idx = rec.get('index')
                if idx is not None and 0 <= idx < len(menu_items):
                    item = menu_items[idx]
                    recommendations.append({
                        **item,
                        'recommendation_reason': rec.get('reason', 'M√≥n ngon ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi y√™u th√≠ch')
                    })

            return recommendations[:limit]

        except Exception as e:
            print(f"Error in Gemini recommendation: {e}")
            # Fallback to first N items with promotions
            promo_items = [item for item in menu_items if item.get('has_promotion')]
            return promo_items[:limit] if promo_items else menu_items[:limit]
